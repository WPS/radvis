# Copyright (c) 2023 WPS - Workplace Solutions GmbH
#
# Licensed under the EUPL, Version 1.2 or as soon they will be approved by the European Commission - subsequent versions of the EUPL (the "Licence");
#
# You may not use this work except in compliance with the Licence.
# You may obtain a copy of the Licence at:
#
# https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
#
# Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the Licence for the specific language governing permissions and limitations under the Licence.

stages:
  - prepare
  - build_test
  - package
  - release
  - deploy
  - coverage

variables:
  # Docker host for testcontainer:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  BACKEND_IMAGE_NAME: "$CI_REGISTRY_IMAGE/radvis-backend"
  GEOSERVER_IMAGE_NAME: "$CI_REGISTRY_IMAGE/radvis-geoserver"
  GEOSERVER_BASE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/geoserver-base"
  GEOSERVER_BASE_IMAGE_VERSION: "2.25.3"
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

services:
  - docker:27.3.1-dind

.docker_job:
  image: docker:stable
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

install_dependencies:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/maven-chrome-runner
  stage: prepare
  except:
    # Tag-Pipelines müssen nicht erneut das Dependencies runterladen, da der Cache durch den zugehörigen Branch schon existiert
    - tags
  script:
    - set -o pipefail
    - mvn $MAVEN_CLI_OPTS compile -DskipTests -Png-install
  artifacts:
    expire_in: 1 month
    paths:
      - distribution/target
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    paths:
      - .m2/repository
      - frontend/radvis/.npm

build:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/maven-chrome-runner
  stage: build_test
  needs:
    - install_dependencies
  except:
    # Tag-Pipelines müssen nicht erneut das Artefakt bauen, da es vom zugehörigen Branch schon existiert
    - tags
  script:
    - set -o pipefail
    - mvn $MAVEN_CLI_OPTS package -DskipTests -Png-install,ng-build,ng-version
  artifacts:
    expire_in: 1 month
    paths:
      - distribution/target
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    policy: pull
    paths:
      - .m2/repository
      - frontend/radvis/.npm

backend_integration_tests:
  image: maven:3.9-eclipse-temurin-17-focal
  stage: build_test
  needs:
    - install_dependencies
  # Starte den Job 7-mal nebeneinander
  # jeder Job ist von 1 bis 7 durchnummeriert und die Nummer ist durch CI_NODE_INDEX nutzbar
  parallel: 7
  except:
    - tags
  variables:
    SPRING_LOG_LEVEL: "WARN"
    HIBERNATE_LOG_LEVEL: "WARN"
  script:
    - set -o pipefail
    # Bauen und Testen und das Ergebnis in log datei mitschreiben für die anschließende Analyse
    # mit grep wird output von liquibase auf stdout gefiltert. (No logger? urgh! siehe https://github.com/liquibase/liquibase/issues/2396)
    # Keine Ausgabe des ablaufenden changesets
    - mvn $MAVEN_CLI_OPTS -DskipSurefire=true -Dtest.group="group$CI_NODE_INDEX" -pl backend verify | grep -v "^Running\sChangeset"
  artifacts:
    expire_in: 1 week
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    policy: pull
    paths:
      - .m2/repository
      - frontend/radvis/.npm

backend_unit_tests:
  image: maven:3.9-eclipse-temurin-17-focal
  needs:
    - install_dependencies
  stage: build_test
  except:
    - tags
  script:
    - set -o pipefail
    - mvn $MAVEN_CLI_OPTS -T 1C -pl backend test
  artifacts:
    expire_in: 1 week
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    policy: pull
    paths:
      - .m2/repository
      - frontend/radvis/.npm


backend_test_coverage:
  image: maven:3.9-eclipse-temurin-17-focal
  when: manual
  stage: coverage
  needs:
    - install_dependencies
  except:
    - tags
  script:
    - set -o pipefail
    - mvn $MAVEN_CLI_OPTS -Pcoverage -pl backend verify
  artifacts:
    paths:
      - backend/target/site/jacoco-merged-test-coverage-report/
    expire_in: 1 week
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    policy: pull
    paths:
      - .m2/repository
      - frontend/radvis/.npm

frontend_tests:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/maven-chrome-runner
  stage: build_test
  needs:
    - install_dependencies
  except:
    - tags
  script:
    - set -o pipefail
    - mvn $MAVEN_CLI_OPTS -DskipTests -pl frontend compile -Png-install
    - mvn $MAVEN_CLI_OPTS -pl frontend test
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/radvis/coverage/radvis/cobertura-coverage.xml
    expire_in: 1 week
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    policy: pull
    paths:
      - .m2/repository
      - frontend/radvis/.npm

frontend_lint:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/maven-chrome-runner
  stage: build_test
  needs:
    - install_dependencies
  except:
    - tags
  script:
    - set -o pipefail
    - mvn $MAVEN_CLI_OPTS -DskipTests -pl frontend compile -Png-install,ng-lint
  artifacts:
    expire_in: 1 week
  cache:
    key:
      files:
        - backend/pom.xml
        - frontend/radvis/package-lock.json
    policy: pull
    paths:
      - .m2/repository
      - frontend/radvis/.npm

package_docker_backend_image:
  stage: package
  needs:
    - backend_unit_tests
    - backend_integration_tests
    - frontend_tests
    - frontend_lint
    - build
  extends: .docker_job
  except:
    - tags
  script:
    - set -eoux pipefail
    - docker build -t $BACKEND_IMAGE_NAME:$CI_COMMIT_SHA ./distribution
    - docker push $BACKEND_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    expire_in: 1 month

package_geoserver_base_image:
  stage: package
  extends: .docker_job
  retry:
    max: 2
    when: job_execution_timeout
  script:
    - if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $GEOSERVER_BASE_IMAGE_NAME:$GEOSERVER_BASE_IMAGE_VERSION >> /dev/null ; then exit ; fi
    - docker build -t $GEOSERVER_BASE_IMAGE_NAME:$CI_COMMIT_SHA --build-arg GEOSERVER_BASE_IMAGE_VERSION=$GEOSERVER_BASE_IMAGE_VERSION ./infrastruktur/geoserver/geoserver_base
    - docker push $GEOSERVER_BASE_IMAGE_NAME:$CI_COMMIT_SHA
    - docker tag $GEOSERVER_BASE_IMAGE_NAME:$CI_COMMIT_SHA $GEOSERVER_BASE_IMAGE_NAME:$GEOSERVER_BASE_IMAGE_VERSION
    - docker push $GEOSERVER_BASE_IMAGE_NAME:$GEOSERVER_BASE_IMAGE_VERSION
  artifacts:
    expire_in: 1 month

package_geoserver_radvis_image:
  stage: package
  extends: .docker_job
  needs:
    - job: package_geoserver_base_image
      optional: true
  script:
    - docker build -t $GEOSERVER_IMAGE_NAME:$CI_COMMIT_SHA --build-arg GEOSERVER_BASE_IMAGE_NAME=$GEOSERVER_BASE_IMAGE_NAME --build-arg GEOSERVER_BASE_IMAGE_VERSION=$GEOSERVER_BASE_IMAGE_VERSION ./infrastruktur/geoserver/
    - docker push $GEOSERVER_IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    expire_in: 1 month

.tag_docker_images:
  stage: deploy
  extends: .docker_job
  script:
    - docker pull $BACKEND_IMAGE_NAME:$CI_COMMIT_SHA
    - docker pull $GEOSERVER_IMAGE_NAME:$CI_COMMIT_SHA
    - docker tag $BACKEND_IMAGE_NAME:$CI_COMMIT_SHA $BACKEND_IMAGE_NAME:$TAG
    - docker tag $GEOSERVER_IMAGE_NAME:$CI_COMMIT_SHA $GEOSERVER_IMAGE_NAME:$TAG
    - docker push $BACKEND_IMAGE_NAME:$TAG
    - docker push $GEOSERVER_IMAGE_NAME:$TAG
  artifacts:
    expire_in: 1 month

tag_latest_docker_image:
  extends: .tag_docker_images
  only:
    - master
  variables:
    TAG: latest

tag_release_docker_image:
  extends: .tag_docker_images
  only:
    - tags
  variables:
    TAG: $CI_COMMIT_REF_NAME

.deploy_job:
  stage: deploy
  when: manual
  variables:
    PROPERTY_KEY: VERSION_TAG

deploy_dev:
  extends: .deploy_job
  variables:
    PROPERTY_VALUE: $CI_COMMIT_SHA
    ENV_URL: https://radvis-dev.landbw.de
  trigger:
    project: radvis/infrastruktur-bitbw
    branch: dev

deploy_vertrieb:
  extends: .deploy_job
  variables:
    PROPERTY_VALUE: $CI_COMMIT_SHA
    ENV_URL: https://radvis-demo.wps.de
  trigger:
    project: radvis/infrastruktur-bitbw
    branch: vertrieb

deploy_dev_scheduled:
  extends: deploy_dev
  when: always
  only:
    variables:
      - $DEPLOY_DEV

deploy_test:
  extends: .deploy_job
  only:
    - tags
  variables:
    PROPERTY_VALUE: $CI_COMMIT_REF_NAME
    ENV_URL: https://radvis-test.landbw.de
  trigger:
    project: radvis/infrastruktur-bitbw
    branch: test

deploy_prod:
  extends: .deploy_job
  only:
    - tags
  variables:
    PROPERTY_VALUE: $CI_COMMIT_REF_NAME
    ENV_URL: https://radvis.landbw.de
  trigger:
    project: radvis/infrastruktur-bitbw
    branch: prod


update-maven-dependencies:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/maven-dependency-updater
  stage: build_test
  needs:
    - install_dependencies
  only:
    variables:
      - $UPDATE_DEPS
  variables:
    COMMAND: "mvn versions:use-latest-versions && mvn versions:update-parent"
  script:
    - export BRANCH_NAME="maven-dependencies-update_$(date -I)"
    - export TARGET_BRANCH_NAME="$CI_COMMIT_BRANCH"
    - export COMMIT_MESSAGE="Update maven dependencies ($(date -I))"
    - run-update-and-create-mr.sh
  artifacts:
    expire_in: 1 week


release-patch:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/gitlab-release-it-runner
  stage: release
  when: manual
  only:
    - master
    - /^release-.*$/
  variables:
    GITLAB_TOKEN: $GITLAB_ACCESS_TOKEN
  script:
    - create-tag
  artifacts:
    expire_in: 1 week

release:
  extends: release-patch
  variables:
    DEFAULT_INCREASE_VERSION: minor

gitlab-release:
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/gitlab-release-it-runner
  stage: release
  only:
    - tags
  variables:
    GITLAB_TOKEN: $GITLAB_ACCESS_TOKEN
  script:
    - create-release
  artifacts:
    expire_in: 1 week
